n  ,hp          @<Plug>(GitGutterPreviewHunk)
n  ,hu          @<Plug>(GitGutterUndoHunk)
n  ,hs          @<Plug>(GitGutterStageHunk)
x  ,hs          @<Plug>(GitGutterStageHunk)
n  [c           @<Plug>(GitGutterPrevHunk)
n  ]c           @<Plug>(GitGutterNextHunk)
x  ac           @<Plug>(GitGutterTextObjectOuterVisual)
o  ac           @<Plug>(GitGutterTextObjectOuterPending)
x  ic           @<Plug>(GitGutterTextObjectInnerVisual)
o  ic           @<Plug>(GitGutterTextObjectInnerPending)
n  <Tab>         <C-W><C-W>
v  <Tab>       * >gv
n  <CR>        * :noh<CR><CR>
x  #           * y?\V<C-R>"<CR>
                 Nvim builtin
o  %             <Plug>(MatchitOperationForward)
x  %             <Plug>(MatchitVisualForward)
n  %             <Plug>(MatchitNormalForward)
n  &           * :&&<CR>
                 Nvim builtin
x  *           * y/\V<C-R>"<CR>
                 Nvim builtin
n  ,ca           <Plug>NERDCommenterAltDelims
v  ,cA           <Plug>NERDCommenterAppend
n  ,cA           <Plug>NERDCommenterAppend
v  ,c$           <Plug>NERDCommenterToEOL
n  ,c$           <Plug>NERDCommenterToEOL
v  ,cu           <Plug>NERDCommenterUncomment
n  ,cu           <Plug>NERDCommenterUncomment
v  ,cn           <Plug>NERDCommenterNest
n  ,cn           <Plug>NERDCommenterNest
v  ,cb           <Plug>NERDCommenterAlignBoth
n  ,cb           <Plug>NERDCommenterAlignBoth
v  ,cl           <Plug>NERDCommenterAlignLeft
n  ,cl           <Plug>NERDCommenterAlignLeft
v  ,cy           <Plug>NERDCommenterYank
n  ,cy           <Plug>NERDCommenterYank
v  ,ci           <Plug>NERDCommenterInvert
n  ,ci           <Plug>NERDCommenterInvert
v  ,cs           <Plug>NERDCommenterSexy
n  ,cs           <Plug>NERDCommenterSexy
v  ,cm           <Plug>NERDCommenterMinimal
n  ,cm           <Plug>NERDCommenterMinimal
v  ,cc           <Plug>NERDCommenterComment
n  ,cc           <Plug>NERDCommenterComment
   ,r            :call SearchAndReplace()<CR>
   ,f            :call GlobalFind()<CR>
n  ,gl         * :Git lg<CR>
n  ,gg         * :Git log<CR>
n  ,gs         * :Git ls<CR>
n  ,gb         * :Git blame<CR>
n  ,gd         * :Git diff %<CR>
n  ,gp         * :Git push<CR>
n  ,gc         * :Git commit -v -q<CR>
n  ,gr         * :Git checkout -- %<CR>
n  ,ga         * :Git add %<CR>
n  ,g          * :Git<Space>
   ,b6         * :% !base64 <CR>
   ,d6         * :% !base64 -d <CR>
   ,c          * :AIChat<CR>
   ,a          * :AIChat
   ,s            :call RunNearestTest()<CR>
   ,t            :call RunCurrentTests()<CR>
n  Y           * y$
                 Nvim builtin
o  [%            <Plug>(MatchitOperationMultiBackward)
x  [%            <Plug>(MatchitVisualMultiBackward)
n  [%            <Plug>(MatchitNormalMultiBackward)
o  ]%            <Plug>(MatchitOperationMultiForward)
x  ]%            <Plug>(MatchitVisualMultiForward)
n  ]%            <Plug>(MatchitNormalMultiForward)
x  a%            <Plug>(MatchitVisualTextObject)
x  gx            <Plug>NetrwBrowseXVis
n  gx            <Plug>NetrwBrowseX
o  g%            <Plug>(MatchitOperationBackward)
x  g%            <Plug>(MatchitVisualBackward)
n  g%            <Plug>(MatchitNormalBackward)
x  p           * pgvy
n  y<C-G>      & :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
n  <SNR>123_:  * :<C-U><C-R>=v:count ? v:count : ''<CR>
s  <Plug>luasnip-jump-prev * <Lua 112: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:57>
s  <Plug>luasnip-jump-next * <Lua 111: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:54>
s  <Plug>luasnip-prev-choice * <Lua 110: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:51>
s  <Plug>luasnip-next-choice * <Lua 109: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:48>
s  <Plug>luasnip-expand-snippet * <Lua 108: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:45>
s  <Plug>luasnip-expand-or-jump * <Lua 107: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:42>
   <Plug>luasnip-expand-repeat * <Lua 105: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:35>
n  <Plug>luasnip-delete-check * <Lua 103: ~/.local/share/nvim/plugged/LuaSnip/plugin/luasnip.lua:28>
x  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<CR>
x  <Plug>(MatchitVisualTextObject)   <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
o  <Plug>(MatchitOperationMultiForward) * :<C-U>call matchit#MultiMatch("W",  "o")<CR>
o  <Plug>(MatchitOperationMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "o")<CR>
x  <Plug>(MatchitVisualMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
x  <Plug>(MatchitVisualMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
n  <Plug>(MatchitNormalMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>
n  <Plug>(MatchitNormalMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>
o  <Plug>(MatchitOperationBackward) * :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
o  <Plug>(MatchitOperationForward) * :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
x  <Plug>(MatchitVisualBackward) * :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
x  <Plug>(MatchitVisualForward) * :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv``
n  <Plug>(MatchitNormalBackward) * :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
n  <Plug>(MatchitNormalForward) * :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
n  <Plug>fugitive: & <Nop>
n  <Plug>fugitive:y<C-G> & :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
n  <Plug>GitGutterPreviewHunk * :call gitgutter#utility#warn('Please change your map <Plug>GitGutterPreviewHunk to <Plug>(GitGutterPreviewHunk)')<CR>
n  <Plug>(GitGutterPreviewHunk) * :GitGutterPreviewHunk<CR>
n  <Plug>GitGutterUndoHunk * :call gitgutter#utility#warn('Please change your map <Plug>GitGutterUndoHunk to <Plug>(GitGutterUndoHunk)')<CR>
n  <Plug>(GitGutterUndoHunk) * :GitGutterUndoHunk<CR>
n  <Plug>GitGutterStageHunk * :call gitgutter#utility#warn('Please change your map <Plug>GitGutterStageHunk to <Plug>(GitGutterStageHunk)')<CR>
n  <Plug>(GitGutterStageHunk) * :GitGutterStageHunk<CR>
x  <Plug>GitGutterStageHunk * :call gitgutter#utility#warn('Please change your map <Plug>GitGutterStageHunk to <Plug>(GitGutterStageHunk)')<CR>
x  <Plug>(GitGutterStageHunk) * :GitGutterStageHunk<CR>
n  <Plug>GitGutterPrevHunk * &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<Plug>GitGutterPrevHunk to \<Plug>(GitGutterPrevHunk)')\<CR>"
n  <Plug>(GitGutterPrevHunk) * &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"
n  <Plug>GitGutterNextHunk * &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<Plug>GitGutterNextHunk to \<Plug>(GitGutterNextHunk)')\<CR>"
n  <Plug>(GitGutterNextHunk) * &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"
x  <Plug>(GitGutterTextObjectOuterVisual) * :<C-U>call gitgutter#hunk#text_object(0)<CR>
x  <Plug>(GitGutterTextObjectInnerVisual) * :<C-U>call gitgutter#hunk#text_object(1)<CR>
o  <Plug>(GitGutterTextObjectOuterPending) * :<C-U>call gitgutter#hunk#text_object(0)<CR>
o  <Plug>(GitGutterTextObjectInnerPending) * :<C-U>call gitgutter#hunk#text_object(1)<CR>
n  <Plug>NERDCommenterAppend   :call NERDComment(0, "append")<CR>
n  <Plug>NERDCommenterToEOL * :call NERDComment(0, "toEOL")<CR>
v  <Plug>NERDCommenterUncomment * :call NERDComment(1, "uncomment")<CR>
n  <Plug>NERDCommenterUncomment * :call NERDComment(0, "uncomment")<CR>
v  <Plug>NERDCommenterNest * <Esc>:call NERDComment(1, "nested")<CR>
n  <Plug>NERDCommenterNest * :call NERDComment(0, "nested")<CR>
v  <Plug>NERDCommenterAlignBoth * <Esc>:call NERDComment(1, "alignBoth")<CR>
n  <Plug>NERDCommenterAlignBoth * :call NERDComment(0, "alignBoth")<CR>
v  <Plug>NERDCommenterAlignLeft * <Esc>:call NERDComment(1, "alignLeft")<CR>
n  <Plug>NERDCommenterAlignLeft * :call NERDComment(0, "alignLeft")<CR>
v  <Plug>NERDCommenterYank   <Esc>:call NERDComment(1, "yank")<CR>
n  <Plug>NERDCommenterYank   :call NERDComment(0, "yank")<CR>
v  <Plug>NERDCommenterInvert * <Esc>:call NERDComment(1, "invert")<CR>
n  <Plug>NERDCommenterInvert * :call NERDComment(0, "invert")<CR>
v  <Plug>NERDCommenterSexy * <Esc>:call NERDComment(1, "sexy")<CR>
n  <Plug>NERDCommenterSexy * :call NERDComment(0, "sexy")<CR>
v  <Plug>NERDCommenterMinimal * <Esc>:call NERDComment(1, "minimal")<CR>
n  <Plug>NERDCommenterMinimal * :call NERDComment(0, "minimal")<CR>
v  <Plug>NERDCommenterToggle * <Esc>:call NERDComment(1, "toggle")<CR>
n  <Plug>NERDCommenterToggle * :call NERDComment(0, "toggle")<CR>
v  <Plug>NERDCommenterComment * <Esc>:call NERDComment(1, "norm")<CR>
n  <Plug>NERDCommenterComment * :call NERDComment(0, "norm")<CR>
n  <Plug>NERDCommenterAltDelims * :call <SNR>55_SwitchToAlternativeDelimiters(1)<CR>
n  <C-P>       * :<C-U>CtrlP<CR>
n  <F6>        * :call ToggleDiagnostics()<CR>
n  <F5>        * :let _s=@/|:%s/\s\+$//e|:let @/=_s|<CR>
   <C-Bslash>    <Esc>:sp | term bash<CR>
v  <C-_>         <Plug>NERDCommenterToggle<CR>gv
n  <C-_>         <Plug>NERDCommenterToggle
   <C-F>         :NERDTreeFind<CR>
   <C-N>         :NERDTreeToggle<CR>
   <C-B>         :buffers<CR>:buffer<Space>
   <C-A>         <Esc>ggVG<CR>
n  <S-Tab>       <C-W>W
v  <S-Tab>     * <gv
   <C-L>         :TagbarToggle<CR>
n  Ï€           * :set invpaste paste?<CR>
